using Amazon.Runtime.Internal.Util;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Sabio.Models;
using Sabio.Models.Domain.InviteMembers;
using Sabio.Models.Requests.InviteMembers;
using Sabio.Models.Requests.Ratings;
using Sabio.Services;
using Sabio.Services.Interfaces;
using Sabio.Web.Controllers;
using Sabio.Web.Models.Responses;
using System;
using System.Collections.Generic;

namespace Sabio.Web.Api.Controllers
{
    [Route("api/invites")]
    [ApiController]
    public class InviteMemberApiController : BaseApiController
    {
        private IInviteMemberService _service = null;
        private IAuthenticationService<int> _authService = null;
        private IEmailService _emailService = null;

        public InviteMemberApiController(IInviteMemberService service
            , ILogger<InviteMemberApiController> logger
            , IAuthenticationService<int> authService, IEmailService emailService) : base(logger)
        {
            _service = service;
            _authService = authService;
            _emailService = emailService;
        }

        [AllowAnonymous]
        [HttpDelete("{id:int}")]
        public ActionResult<SuccessResponse> DeleteById(int id)
        {
            int code = 200;
            BaseResponse response = null;
            try
            {
                _service.DeleteById(id);
                response = new SuccessResponse();
            }
            catch (Exception ex)
            {
                code = 500;
                response = new ErrorResponse(ex.Message);
                Logger.LogError(ex.ToString());
            }
            return StatusCode(code, response);
        }

        [Authorize(Roles = "OrgAdmin")]
        [HttpDelete("{id:int}/createdby")]
        public ActionResult<SuccessResponse> DeleteByCreatedBy(int id)
        {
            int code = 200;
            BaseResponse response = null;
            try
            {
                IUserAuthData user = _authService.GetCurrentUser();
                _service.DeleteByCreatedBy(id, user.Id);
                response = new SuccessResponse();
            }
            catch (Exception ex)
            {
                code = 500;
                response = new ErrorResponse(ex.Message);
                Logger.LogError(ex.ToString());
            }
            return StatusCode(code, response);
        }

        [HttpPost]
        public ActionResult<ItemResponse<InviteMemberEmail>> Create(InviteMemberAddRequest model)
        {
            int code = 201;
            BaseResponse response = null;
            try
            {
                IUserAuthData user = _authService.GetCurrentUser();
                if(model.isOrgAdmin == false)
                {
                    model.UserRoleTypeId = 3;
                }
                else { model.UserRoleTypeId = 2; }
                InviteMemberEmail newMember = _service.Add(model, user);

                _emailService.InviteMemberEmail(model, newMember, user);

                response = new ItemResponse<InviteMemberEmail> { Item = newMember };
            }
            catch (Exception ex)
            {
                code = 500;
                response = new ErrorResponse(ex.Message);
                Logger.LogError(ex.ToString());
            }
            return StatusCode(code, response);
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult<ItemResponse<List<InviteMember>>> GetByToken(string token)
        {
            int code = 200;
            BaseResponse response = null;
            try
            {
                InviteMember memberList = _service.GetByToken(token);
                if (memberList == null)
                {
                    code = 404;
                    response = new ErrorResponse("Application resource not found");
                }
                else
                {
                    response = new ItemResponse<InviteMember> { Item = memberList };
                }
            }
            catch (Exception ex)
            {
                code = 500;
                Logger.LogError(ex.ToString());
                response = new ErrorResponse(ex.Message);
            }
            return StatusCode(code, response);
        }


    }
}
